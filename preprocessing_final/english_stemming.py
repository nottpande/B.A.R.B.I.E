# -*- coding: utf-8 -*-
"""English_Stemming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nVbEpNg7zN8ec5KBYiwJY9_APMaJqx31
"""

import re
# Helper function to measure the "m" value (number of VC sequences)
def measure(word):
    pattern = re.compile(r'[aeiou]+[^aeiou]+')
    matches = pattern.findall(word)
    return len(matches)

# Helper function to check if a word contains a vowel
def contains_vowel(word):
    return bool(re.search(r'[aeiou]', word))

# Helper function to check double consonant at the end
def ends_with_double_consonant(word):
    return bool(re.search(r'([^aeiou])\1$', word))

# Helper function to check CVC (consonant-vowel-consonant) pattern
def cvc(word):
    return bool(re.search(r'[^aeiou][aeiou][^aeiou]$', word)) and not re.search(r'[wxy]$', word)

# Porter Stemmer algorithm with improved accuracy
def porter_stemmer(word):
    original_word = word
    if len(word) <= 2:
        return word  # Early exit for short words

    # Preserve common short words
    if word in {"hi", "do", "to", "it", "is", "be", "am", "are", "was", "were"}:
        return word

    # Step 1a: Plurals and participles
    if word.endswith("sses"):
        word = word[:-2]
    elif word.endswith("ies"):
        word = word[:-2]
    elif word.endswith("ss"):
        pass
    elif word.endswith("s"):
        word = word[:-1]

    # Step 1b: "-ed" and "-ing" endings
    if word.endswith("eed"):
        if measure(word[:-3]) > 0:
            word = word[:-1]
    elif word.endswith("ed") and contains_vowel(word[:-2]):
        word = word[:-2]
        word = step_1b_helper(word)
    elif word.endswith("ing") and contains_vowel(word[:-3]):
        word = word[:-3]
        word = step_1b_helper(word)

    # Step 1c: "y" -> "i"
    if word.endswith("y") and contains_vowel(word[:-1]):
        word = word[:-1] + "i"

    # Step 2: Long suffixes (e.g., "-ational", "-iveness", "-ization")
    suffixes_2 = {
        'ational': 'ate', 'tional': 'tion', 'enci': 'ence', 'anci': 'ance', 'izer': 'ize',
        'bli': 'ble', 'alli': 'al', 'entli': 'ent', 'eli': 'e', 'ousli': 'ous',
        'ization': 'ize', 'ation': 'ate', 'ator': 'ate', 'alism': 'al', 'iveness': 'ive',
        'fulness': 'ful', 'ousness': 'ous', 'aliti': 'al', 'iviti': 'ive', 'biliti': 'ble'
    }
    for suffix, replacement in suffixes_2.items():
        if word.endswith(suffix) and measure(word[:-len(suffix)]) > 0:
            word = word[:-len(suffix)] + replacement
            break

    # Step 3: "-icate", "-ative", "-alize"
    suffixes_3 = {'icate': 'ic', 'ative': '', 'alize': 'al', 'iciti': 'ic', 'ical': 'ic', 'ful': '', 'ness': ''}
    for suffix, replacement in suffixes_3.items():
        if word.endswith(suffix) and measure(word[:-len(suffix)]) > 0:
            word = word[:-len(suffix)] + replacement
            break

    # Step 4: "-al", "-ance", "-ence", etc.
    suffixes_4 = ['al', 'ance', 'ence', 'er', 'ic', 'able', 'ible', 'ant', 'ement', 'ment', 'ent', 'ou', 'ism', 'ate', 'iti', 'ous', 'ive', 'ize']
    for suffix in suffixes_4:
        if word.endswith(suffix) and measure(word[:-len(suffix)]) > 1:
            word = word[:-len(suffix)]
            break

    # Step 5a: "-e" removal
    if word.endswith("e"):
        if measure(word[:-1]) > 1 or (measure(word[:-1]) == 1 and not cvc(word[:-1])):
            word = word[:-1]

    # Step 5b: Double consonant at the end, remove one
    if ends_with_double_consonant(word) and word.endswith("l") and measure(word) > 1:
        word = word[:-1]

    return word

# Step 1b helper (common after "-ed" or "-ing")
def step_1b_helper(word):
    if word.endswith("at") or word.endswith("bl") or word.endswith("iz"):
        word = word + "e"
    elif ends_with_double_consonant(word) and not word.endswith(("l", "s", "z")):
        word = word[:-1]
    elif measure(word) == 1 and cvc(word):
        word = word + "e"
    return word

# Function to stem a sentence
def stem_sentence(sentence):
    words = sentence.split()
    stemmed_words = [porter_stemmer(word.lower()) for word in words]
    return ' '.join(stemmed_words)

sentence = "His father was Venkataappa, and his mother was Seethamma."
stem_sent = stem_sentence(sentence)
print(stem_sent)